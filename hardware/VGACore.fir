;buildInfoPackage: chisel3, version: 3.2.0, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit VGACore : 
  module LineMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip rdAddr : UInt<11>, rdData : UInt<16>, flip wrEna : UInt<1>, flip wrData : UInt<16>, flip wrAddr : UInt<11>}
    
    smem mem : UInt<16>[1600] @[PixelBuffer.scala 20:24]
    read mport _T = mem[io.rdAddr], clock @[PixelBuffer.scala 21:24]
    io.rdData <= _T @[PixelBuffer.scala 21:13]
    when io.wrEna : @[PixelBuffer.scala 23:18]
      write mport _T_1 = mem[io.wrAddr], clock
      _T_1 <= io.wrData
      skip @[PixelBuffer.scala 23:18]
    
  module PixelBuffer : 
    input clock : Clock
    input reset : Reset
    output io : {flip new_frame : UInt<1>, flip pixel_clock : UInt<1>, flip enable : UInt<1>, R : UInt<8>, G : UInt<8>, B : UInt<8>, flip h_pos : UInt<10>, flip v_pos : UInt<10>, mem_addr : UInt<32>, mem_read : UInt<1>, flip mem_valid : UInt<1>, flip mem_data : UInt<32>}
    
    inst memory of LineMemory @[PixelBuffer.scala 46:22]
    memory.clock <= clock
    memory.reset <= reset
    reg recvBuf : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PixelBuffer.scala 48:24]
    reg lineAddress : UInt<9>, clock with : (reset => (reset, UInt<9>("h00"))) @[PixelBuffer.scala 50:28]
    reg v_pos_next : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[PixelBuffer.scala 52:27]
    node _T = add(io.v_pos, UInt<1>("h01")) @[PixelBuffer.scala 53:26]
    node _T_1 = tail(_T, 1) @[PixelBuffer.scala 53:26]
    v_pos_next <= _T_1 @[PixelBuffer.scala 53:14]
    node _T_2 = add(lineAddress, UInt<1>("h01")) @[PixelBuffer.scala 54:30]
    node _T_3 = tail(_T_2, 1) @[PixelBuffer.scala 54:30]
    lineAddress <= _T_3 @[PixelBuffer.scala 54:15]
    recvBuf <= io.mem_data @[PixelBuffer.scala 59:20]
    io.mem_addr <= UInt<1>("h00") @[PixelBuffer.scala 60:20]
    io.mem_read <= UInt<1>("h01") @[PixelBuffer.scala 61:24]
    memory.io.wrEna <= UInt<1>("h01") @[PixelBuffer.scala 63:19]
    memory.io.wrAddr <= lineAddress @[PixelBuffer.scala 64:20]
    memory.io.wrData <= recvBuf @[PixelBuffer.scala 65:20]
    node _T_4 = eq(io.mem_valid, UInt<1>("h01")) @[PixelBuffer.scala 68:21]
    node _T_5 = lt(lineAddress, UInt<9>("h0190")) @[PixelBuffer.scala 68:47]
    node _T_6 = and(_T_4, _T_5) @[PixelBuffer.scala 68:32]
    when _T_6 : @[PixelBuffer.scala 68:55]
      node _T_7 = add(lineAddress, UInt<1>("h01")) @[PixelBuffer.scala 69:32]
      node _T_8 = tail(_T_7, 1) @[PixelBuffer.scala 69:32]
      lineAddress <= _T_8 @[PixelBuffer.scala 69:17]
      skip @[PixelBuffer.scala 68:55]
    node _T_9 = eq(io.h_pos, UInt<1>("h00")) @[PixelBuffer.scala 73:17]
    when _T_9 : @[PixelBuffer.scala 73:25]
      lineAddress <= UInt<1>("h00") @[PixelBuffer.scala 74:17]
      skip @[PixelBuffer.scala 73:25]
    node _T_10 = bits(v_pos_next, 0, 0) @[PixelBuffer.scala 78:18]
    node _T_11 = eq(_T_10, UInt<1>("h00")) @[PixelBuffer.scala 78:22]
    when _T_11 : @[PixelBuffer.scala 78:31]
      node _T_12 = add(UInt<9>("h0190"), lineAddress) @[PixelBuffer.scala 80:33]
      node _T_13 = tail(_T_12, 1) @[PixelBuffer.scala 80:33]
      memory.io.wrAddr <= _T_13 @[PixelBuffer.scala 80:24]
      skip @[PixelBuffer.scala 78:31]
    else : @[PixelBuffer.scala 81:16]
      memory.io.wrAddr <= lineAddress @[PixelBuffer.scala 83:24]
      skip @[PixelBuffer.scala 81:16]
    node _T_14 = bits(io.v_pos, 0, 0) @[PixelBuffer.scala 87:16]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[PixelBuffer.scala 87:20]
    when _T_15 : @[PixelBuffer.scala 87:29]
      node _T_16 = eq(io.enable, UInt<1>("h01")) @[PixelBuffer.scala 88:20]
      when _T_16 : @[PixelBuffer.scala 88:29]
        memory.io.rdAddr <= io.h_pos @[PixelBuffer.scala 89:24]
        skip @[PixelBuffer.scala 88:29]
      else : @[PixelBuffer.scala 90:17]
        memory.io.rdAddr <= UInt<10>("h0320") @[PixelBuffer.scala 91:24]
        skip @[PixelBuffer.scala 90:17]
      skip @[PixelBuffer.scala 87:29]
    else : @[PixelBuffer.scala 93:14]
      node _T_17 = eq(io.enable, UInt<1>("h01")) @[PixelBuffer.scala 94:20]
      when _T_17 : @[PixelBuffer.scala 94:29]
        node _T_18 = cat(UInt<1>("h00"), io.h_pos) @[Cat.scala 29:58]
        node _T_19 = add(_T_18, UInt<10>("h0320")) @[PixelBuffer.scala 95:51]
        node _T_20 = tail(_T_19, 1) @[PixelBuffer.scala 95:51]
        memory.io.rdAddr <= _T_20 @[PixelBuffer.scala 95:24]
        skip @[PixelBuffer.scala 94:29]
      else : @[PixelBuffer.scala 96:17]
        memory.io.rdAddr <= UInt<1>("h00") @[PixelBuffer.scala 97:24]
        skip @[PixelBuffer.scala 96:17]
      skip @[PixelBuffer.scala 93:14]
    io.R <= UInt<1>("h00") @[PixelBuffer.scala 102:8]
    io.G <= UInt<1>("h00") @[PixelBuffer.scala 103:8]
    io.B <= UInt<1>("h00") @[PixelBuffer.scala 104:8]
    node _T_21 = eq(io.enable, UInt<1>("h01")) @[PixelBuffer.scala 105:18]
    when _T_21 : @[PixelBuffer.scala 105:27]
      node _T_22 = bits(memory.io.rdData, 14, 10) @[PixelBuffer.scala 106:19]
      node _T_23 = shl(_T_22, 3) @[PixelBuffer.scala 106:28]
      io.R <= _T_23 @[PixelBuffer.scala 106:10]
      node _T_24 = bits(memory.io.rdData, 9, 5) @[PixelBuffer.scala 107:19]
      node _T_25 = shl(_T_24, 3) @[PixelBuffer.scala 107:26]
      io.G <= _T_25 @[PixelBuffer.scala 107:10]
      node _T_26 = bits(memory.io.rdData, 4, 0) @[PixelBuffer.scala 108:19]
      node _T_27 = shl(_T_26, 3) @[PixelBuffer.scala 108:26]
      io.B <= _T_27 @[PixelBuffer.scala 108:10]
      skip @[PixelBuffer.scala 105:27]
    
  module VGAController : 
    input clock : Clock
    input reset : Reset
    output io : {n_blank : UInt<1>, h_sync : UInt<1>, v_sync : UInt<1>, new_frame : UInt<1>, pixel_clock : UInt<1>, R : UInt<8>, G : UInt<8>, B : UInt<8>, mem_addr : UInt<32>, mem_read : UInt<1>, flip mem_valid : UInt<1>, flip mem_data : UInt<32>}
    
    reg cntReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[VGAController.scala 29:23]
    reg pixel_clock : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[VGAController.scala 30:28]
    node _T = not(pixel_clock) @[VGAController.scala 33:18]
    pixel_clock <= _T @[VGAController.scala 33:15]
    io.pixel_clock <= pixel_clock @[VGAController.scala 34:18]
    io.n_blank <= UInt<1>("h00") @[VGAController.scala 36:14]
    io.h_sync <= UInt<1>("h00") @[VGAController.scala 37:13]
    io.v_sync <= UInt<1>("h00") @[VGAController.scala 38:13]
    io.new_frame <= UInt<1>("h00") @[VGAController.scala 39:16]
    reg v_cntReg : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[VGAController.scala 57:25]
    reg h_cntReg : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[VGAController.scala 58:25]
    inst PixelBuffer of PixelBuffer @[VGAController.scala 61:27]
    PixelBuffer.clock <= clock
    PixelBuffer.reset <= reset
    PixelBuffer.io.new_frame <= io.new_frame @[VGAController.scala 63:28]
    PixelBuffer.io.enable <= io.n_blank @[VGAController.scala 64:25]
    PixelBuffer.io.pixel_clock <= pixel_clock @[VGAController.scala 65:30]
    PixelBuffer.io.h_pos <= h_cntReg @[VGAController.scala 66:24]
    PixelBuffer.io.v_pos <= v_cntReg @[VGAController.scala 67:24]
    io.mem_addr <= PixelBuffer.io.mem_addr @[VGAController.scala 69:15]
    io.mem_read <= PixelBuffer.io.mem_read @[VGAController.scala 70:15]
    PixelBuffer.io.mem_valid <= io.mem_valid @[VGAController.scala 71:28]
    PixelBuffer.io.mem_data <= io.mem_data @[VGAController.scala 72:27]
    io.R <= PixelBuffer.io.R @[VGAController.scala 74:8]
    io.G <= PixelBuffer.io.G @[VGAController.scala 75:8]
    io.B <= PixelBuffer.io.B @[VGAController.scala 76:8]
    node _T_1 = not(pixel_clock) @[VGAController.scala 79:8]
    when _T_1 : @[VGAController.scala 79:22]
      node _T_2 = add(h_cntReg, UInt<1>("h01")) @[VGAController.scala 80:26]
      node _T_3 = tail(_T_2, 1) @[VGAController.scala 80:26]
      h_cntReg <= _T_3 @[VGAController.scala 80:14]
      skip @[VGAController.scala 79:22]
    node _T_4 = eq(h_cntReg, UInt<11>("h041f")) @[VGAController.scala 83:17]
    when _T_4 : @[VGAController.scala 83:42]
      h_cntReg <= UInt<1>("h00") @[VGAController.scala 84:14]
      node _T_5 = add(v_cntReg, UInt<1>("h01")) @[VGAController.scala 85:26]
      node _T_6 = tail(_T_5, 1) @[VGAController.scala 85:26]
      v_cntReg <= _T_6 @[VGAController.scala 85:14]
      skip @[VGAController.scala 83:42]
    node _T_7 = eq(v_cntReg, UInt<10>("h0274")) @[VGAController.scala 88:17]
    when _T_7 : @[VGAController.scala 88:37]
      v_cntReg <= UInt<1>("h00") @[VGAController.scala 89:14]
      io.new_frame <= UInt<1>("h01") @[VGAController.scala 90:18]
      skip @[VGAController.scala 88:37]
    node _T_8 = geq(v_cntReg, UInt<10>("h0259")) @[VGAController.scala 94:18]
    node _T_9 = lt(v_cntReg, UInt<10>("h025d")) @[VGAController.scala 94:63]
    node _T_10 = and(_T_8, _T_9) @[VGAController.scala 94:51]
    when _T_10 : @[VGAController.scala 94:105]
      io.v_sync <= UInt<1>("h01") @[VGAController.scala 95:15]
      skip @[VGAController.scala 94:105]
    else : @[VGAController.scala 97:14]
      io.v_sync <= UInt<1>("h00") @[VGAController.scala 98:15]
      skip @[VGAController.scala 97:14]
    node _T_11 = geq(h_cntReg, UInt<10>("h0348")) @[VGAController.scala 102:18]
    node _T_12 = lt(h_cntReg, UInt<10>("h03c8")) @[VGAController.scala 102:63]
    node _T_13 = and(_T_11, _T_12) @[VGAController.scala 102:51]
    when _T_13 : @[VGAController.scala 102:105]
      io.h_sync <= UInt<1>("h01") @[VGAController.scala 103:15]
      skip @[VGAController.scala 102:105]
    else : @[VGAController.scala 105:14]
      io.h_sync <= UInt<1>("h00") @[VGAController.scala 106:15]
      skip @[VGAController.scala 105:14]
    node _T_14 = lt(h_cntReg, UInt<10>("h0320")) @[VGAController.scala 110:18]
    node _T_15 = lt(v_cntReg, UInt<10>("h0258")) @[VGAController.scala 110:44]
    node _T_16 = and(_T_14, _T_15) @[VGAController.scala 110:32]
    when _T_16 : @[VGAController.scala 110:59]
      io.n_blank <= UInt<1>("h01") @[VGAController.scala 111:16]
      skip @[VGAController.scala 110:59]
    else : @[VGAController.scala 113:14]
      io.n_blank <= UInt<1>("h00") @[VGAController.scala 114:16]
      skip @[VGAController.scala 113:14]
    
  module VGACore : 
    input clock : Clock
    input reset : UInt<1>
    output io : {pixel_clock : UInt<1>, n_sync : UInt<1>, n_blank : UInt<1>, h_sync : UInt<1>, v_sync : UInt<1>, R : UInt<8>, G : UInt<8>, B : UInt<8>, memPort : {M : {Cmd : UInt<3>, Addr : UInt<32>, Data : UInt<32>, DataValid : UInt<1>, DataByteEn : UInt<4>}, flip S : {Resp : UInt<2>, Data : UInt<32>, CmdAccept : UInt<1>, DataAccept : UInt<1>}}}
    
    io.n_sync <= UInt<1>("h00") @[VGACore.scala 37:13]
    inst controller of VGAController @[VGACore.scala 39:26]
    controller.clock <= clock
    controller.reset <= reset
    io.pixel_clock <= controller.io.pixel_clock @[VGACore.scala 41:18]
    io.n_blank <= controller.io.n_blank @[VGACore.scala 42:14]
    io.h_sync <= controller.io.h_sync @[VGACore.scala 43:13]
    io.v_sync <= controller.io.v_sync @[VGACore.scala 44:13]
    io.R <= controller.io.R @[VGACore.scala 46:8]
    io.G <= controller.io.G @[VGACore.scala 47:8]
    io.B <= controller.io.B @[VGACore.scala 48:8]
    io.memPort.M.Data <= UInt<1>("h00") @[VGACore.scala 51:21]
    io.memPort.M.DataValid <= UInt<1>("h00") @[VGACore.scala 52:26]
    controller.io.mem_data <= io.memPort.S.Data @[VGACore.scala 54:26]
    controller.io.mem_valid <= io.memPort.S.DataAccept @[VGACore.scala 55:27]
    node _T = eq(UInt<1>("h00"), UInt<1>("h00")) @[VGACore.scala 57:30]
    io.memPort.M.DataByteEn <= _T @[VGACore.scala 57:27]
    io.memPort.M.Addr <= controller.io.mem_addr @[VGACore.scala 58:21]
    io.memPort.M.Cmd <= UInt<3>("h00") @[VGACore.scala 60:20]
    when controller.io.mem_read : @[VGACore.scala 61:32]
      io.memPort.M.Cmd <= UInt<3>("h02") @[VGACore.scala 62:22]
      skip @[VGACore.scala 61:32]
    
